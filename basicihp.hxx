// Copyright (c) 2005-2023 Code Synthesis.
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis gives permission
// to link this program with the Xerces-C++ library (or with modified
// versions of Xerces-C++ that use the same license as Xerces-C++), and
// distribute linked combinations including the two. You must obey the GNU
// General Public License version 2 in all respects for all of the code
// used other than Xerces-C++. If you modify this copy of the program, you
// may extend this exception to your version of the program, but you are
// not obligated to do so. If you do not wish to do so, delete this
// exception statement from your version.
//
// Furthermore, Code Synthesis makes a special exception for the Free/Libre
// and Open Source Software (FLOSS) which is described in the accompanying
// FLOSSE file.
//

#ifndef BASICIHP_HXX
#define BASICIHP_HXX

#ifndef XSD_CXX11
#define XSD_CXX11
#endif

#ifndef XSD_USE_CHAR
#define XSD_USE_CHAR
#endif

#ifndef XSD_CXX_TREE_USE_CHAR
#define XSD_CXX_TREE_USE_CHAR
#endif

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/config.hxx>

#if (LIBXSD_VERSION != 400002000000000L)
#error XSD runtime version mismatch
#endif

#include <xsd/cxx/pre.hxx>

#include <xsd/cxx/xml/char-utf8.hxx>

#include <xsd/cxx/tree/exceptions.hxx>
#include <xsd/cxx/tree/elements.hxx>
#include <xsd/cxx/tree/types.hxx>

#include <xsd/cxx/xml/error-handler.hxx>

#include <xsd/cxx/xml/dom/auto-ptr.hxx>

#include <xsd/cxx/tree/parsing.hxx>
#include <xsd/cxx/tree/parsing/byte.hxx>
#include <xsd/cxx/tree/parsing/unsigned-byte.hxx>
#include <xsd/cxx/tree/parsing/short.hxx>
#include <xsd/cxx/tree/parsing/unsigned-short.hxx>
#include <xsd/cxx/tree/parsing/int.hxx>
#include <xsd/cxx/tree/parsing/unsigned-int.hxx>
#include <xsd/cxx/tree/parsing/long.hxx>
#include <xsd/cxx/tree/parsing/unsigned-long.hxx>
#include <xsd/cxx/tree/parsing/boolean.hxx>
#include <xsd/cxx/tree/parsing/float.hxx>
#include <xsd/cxx/tree/parsing/double.hxx>
#include <xsd/cxx/tree/parsing/decimal.hxx>

namespace xml_schema
{
  // anyType and anySimpleType.
  //
  typedef ::xsd::cxx::tree::type type;
  typedef ::xsd::cxx::tree::simple_type< char, type > simple_type;
  typedef ::xsd::cxx::tree::type container;

  // 8-bit
  //
  typedef signed char byte;
  typedef unsigned char unsigned_byte;

  // 16-bit
  //
  typedef short short_;
  typedef unsigned short unsigned_short;

  // 32-bit
  //
  typedef int int_;
  typedef unsigned int unsigned_int;

  // 64-bit
  //
  typedef long long long_;
  typedef unsigned long long unsigned_long;

  // Supposed to be arbitrary-length integral types.
  //
  typedef long long integer;
  typedef long long non_positive_integer;
  typedef unsigned long long non_negative_integer;
  typedef unsigned long long positive_integer;
  typedef long long negative_integer;

  // Boolean.
  //
  typedef bool boolean;

  // Floating-point types.
  //
  typedef float float_;
  typedef double double_;
  typedef double decimal;

  // String types.
  //
  typedef ::xsd::cxx::tree::string< char, simple_type > string;
  typedef ::xsd::cxx::tree::normalized_string< char, string > normalized_string;
  typedef ::xsd::cxx::tree::token< char, normalized_string > token;
  typedef ::xsd::cxx::tree::name< char, token > name;
  typedef ::xsd::cxx::tree::nmtoken< char, token > nmtoken;
  typedef ::xsd::cxx::tree::nmtokens< char, simple_type, nmtoken > nmtokens;
  typedef ::xsd::cxx::tree::ncname< char, name > ncname;
  typedef ::xsd::cxx::tree::language< char, token > language;

  // ID/IDREF.
  //
  typedef ::xsd::cxx::tree::id< char, ncname > id;
  typedef ::xsd::cxx::tree::idref< char, ncname, type > idref;
  typedef ::xsd::cxx::tree::idrefs< char, simple_type, idref > idrefs;

  // URI.
  //
  typedef ::xsd::cxx::tree::uri< char, simple_type > uri;

  // Qualified name.
  //
  typedef ::xsd::cxx::tree::qname< char, simple_type, uri, ncname > qname;

  // Binary.
  //
  typedef ::xsd::cxx::tree::buffer< char > buffer;
  typedef ::xsd::cxx::tree::base64_binary< char, simple_type > base64_binary;
  typedef ::xsd::cxx::tree::hex_binary< char, simple_type > hex_binary;

  // Date/time.
  //
  typedef ::xsd::cxx::tree::time_zone time_zone;
  typedef ::xsd::cxx::tree::date< char, simple_type > date;
  typedef ::xsd::cxx::tree::date_time< char, simple_type > date_time;
  typedef ::xsd::cxx::tree::duration< char, simple_type > duration;
  typedef ::xsd::cxx::tree::gday< char, simple_type > gday;
  typedef ::xsd::cxx::tree::gmonth< char, simple_type > gmonth;
  typedef ::xsd::cxx::tree::gmonth_day< char, simple_type > gmonth_day;
  typedef ::xsd::cxx::tree::gyear< char, simple_type > gyear;
  typedef ::xsd::cxx::tree::gyear_month< char, simple_type > gyear_month;
  typedef ::xsd::cxx::tree::time< char, simple_type > time;

  // Entity.
  //
  typedef ::xsd::cxx::tree::entity< char, ncname > entity;
  typedef ::xsd::cxx::tree::entities< char, simple_type, entity > entities;

  typedef ::xsd::cxx::tree::content_order content_order;
  // Flags and properties.
  //
  typedef ::xsd::cxx::tree::flags flags;
  typedef ::xsd::cxx::tree::properties< char > properties;

  // Parsing/serialization diagnostics.
  //
  typedef ::xsd::cxx::tree::severity severity;
  typedef ::xsd::cxx::tree::error< char > error;
  typedef ::xsd::cxx::tree::diagnostics< char > diagnostics;

  // Exceptions.
  //
  typedef ::xsd::cxx::tree::exception< char > exception;
  typedef ::xsd::cxx::tree::bounds< char > bounds;
  typedef ::xsd::cxx::tree::duplicate_id< char > duplicate_id;
  typedef ::xsd::cxx::tree::parsing< char > parsing;
  typedef ::xsd::cxx::tree::expected_element< char > expected_element;
  typedef ::xsd::cxx::tree::unexpected_element< char > unexpected_element;
  typedef ::xsd::cxx::tree::expected_attribute< char > expected_attribute;
  typedef ::xsd::cxx::tree::unexpected_enumerator< char > unexpected_enumerator;
  typedef ::xsd::cxx::tree::expected_text_content< char > expected_text_content;
  typedef ::xsd::cxx::tree::no_prefix_mapping< char > no_prefix_mapping;

  // Error handler callback interface.
  //
  typedef ::xsd::cxx::xml::error_handler< char > error_handler;

  // DOM interaction.
  //
  namespace dom
  {
    // Automatic pointer for DOMDocument.
    //
    using ::xsd::cxx::xml::dom::unique_ptr;

#ifndef XSD_CXX_TREE_TREE_NODE_KEY__XML_SCHEMA
#define XSD_CXX_TREE_TREE_NODE_KEY__XML_SCHEMA
    // DOM user data key for back pointers to tree nodes.
    //
    const XMLCh* const tree_node_key = ::xsd::cxx::tree::user_data_keys::node;
#endif
  }
}

// Forward declarations.
//
class Library;
class Component;
class Netlists;
class Symbols;
class Parameters;
class NgspiceNetlist;
class Symbol;
class Parameter;

#include <memory>    // ::std::unique_ptr
#include <limits>    // std::numeric_limits
#include <algorithm> // std::binary_search
#include <utility>   // std::move

#include <xsd/cxx/xml/char-utf8.hxx>

#include <xsd/cxx/tree/exceptions.hxx>
#include <xsd/cxx/tree/elements.hxx>
#include <xsd/cxx/tree/containers.hxx>
#include <xsd/cxx/tree/list.hxx>

#include <xsd/cxx/xml/dom/parsing-header.hxx>

class Library: public ::xml_schema::type
{
  public:
  // Component
  //
  typedef ::Component Component_type;
  typedef ::xsd::cxx::tree::traits< Component_type, char > Component_traits;

  const Component_type&
  Component () const;

  Component_type&
  Component ();

  void
  Component (const Component_type& x);

  void
  Component (::std::unique_ptr< Component_type > p);

  // name
  //
  typedef ::xml_schema::string name_type;
  typedef ::xsd::cxx::tree::traits< name_type, char > name_traits;

  const name_type&
  name () const;

  name_type&
  name ();

  void
  name (const name_type& x);

  void
  name (::std::unique_ptr< name_type > p);

  // Constructors.
  //
  Library (const Component_type&,
           const name_type&);

  Library (::std::unique_ptr< Component_type >,
           const name_type&);

  Library (const ::xercesc::DOMElement& e,
           ::xml_schema::flags f = 0,
           ::xml_schema::container* c = 0);

  Library (const Library& x,
           ::xml_schema::flags f = 0,
           ::xml_schema::container* c = 0);

  virtual Library*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  Library&
  operator= (const Library& x);

  virtual 
  ~Library ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  ::xsd::cxx::tree::one< Component_type > Component_;
  ::xsd::cxx::tree::one< name_type > name_;
};

class Component: public ::xml_schema::type
{
  public:
  // Description
  //
  typedef ::xml_schema::string Description_type;
  typedef ::xsd::cxx::tree::traits< Description_type, char > Description_traits;

  const Description_type&
  Description () const;

  Description_type&
  Description ();

  void
  Description (const Description_type& x);

  void
  Description (::std::unique_ptr< Description_type > p);

  // Netlists
  //
  typedef ::Netlists Netlists_type;
  typedef ::xsd::cxx::tree::traits< Netlists_type, char > Netlists_traits;

  const Netlists_type&
  Netlists () const;

  Netlists_type&
  Netlists ();

  void
  Netlists (const Netlists_type& x);

  void
  Netlists (::std::unique_ptr< Netlists_type > p);

  // Symbols
  //
  typedef ::Symbols Symbols_type;
  typedef ::xsd::cxx::tree::traits< Symbols_type, char > Symbols_traits;

  const Symbols_type&
  Symbols () const;

  Symbols_type&
  Symbols ();

  void
  Symbols (const Symbols_type& x);

  void
  Symbols (::std::unique_ptr< Symbols_type > p);

  // Parameters
  //
  typedef ::Parameters Parameters_type;
  typedef ::xsd::cxx::tree::traits< Parameters_type, char > Parameters_traits;

  const Parameters_type&
  Parameters () const;

  Parameters_type&
  Parameters ();

  void
  Parameters (const Parameters_type& x);

  void
  Parameters (::std::unique_ptr< Parameters_type > p);

  // name
  //
  typedef ::xml_schema::string name_type;
  typedef ::xsd::cxx::tree::traits< name_type, char > name_traits;

  const name_type&
  name () const;

  name_type&
  name ();

  void
  name (const name_type& x);

  void
  name (::std::unique_ptr< name_type > p);

  // schematic_id
  //
  typedef ::xml_schema::string schematic_id_type;
  typedef ::xsd::cxx::tree::traits< schematic_id_type, char > schematic_id_traits;

  const schematic_id_type&
  schematic_id () const;

  schematic_id_type&
  schematic_id ();

  void
  schematic_id (const schematic_id_type& x);

  void
  schematic_id (::std::unique_ptr< schematic_id_type > p);

  // show_name
  //
  typedef ::xml_schema::boolean show_name_type;
  typedef ::xsd::cxx::tree::traits< show_name_type, char > show_name_traits;

  const show_name_type&
  show_name () const;

  show_name_type&
  show_name ();

  void
  show_name (const show_name_type& x);

  // Constructors.
  //
  Component (const Description_type&,
             const Netlists_type&,
             const Symbols_type&,
             const Parameters_type&,
             const name_type&,
             const schematic_id_type&,
             const show_name_type&);

  Component (const Description_type&,
             ::std::unique_ptr< Netlists_type >,
             ::std::unique_ptr< Symbols_type >,
             ::std::unique_ptr< Parameters_type >,
             const name_type&,
             const schematic_id_type&,
             const show_name_type&);

  Component (const ::xercesc::DOMElement& e,
             ::xml_schema::flags f = 0,
             ::xml_schema::container* c = 0);

  Component (const Component& x,
             ::xml_schema::flags f = 0,
             ::xml_schema::container* c = 0);

  virtual Component*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  Component&
  operator= (const Component& x);

  virtual 
  ~Component ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  ::xsd::cxx::tree::one< Description_type > Description_;
  ::xsd::cxx::tree::one< Netlists_type > Netlists_;
  ::xsd::cxx::tree::one< Symbols_type > Symbols_;
  ::xsd::cxx::tree::one< Parameters_type > Parameters_;
  ::xsd::cxx::tree::one< name_type > name_;
  ::xsd::cxx::tree::one< schematic_id_type > schematic_id_;
  ::xsd::cxx::tree::one< show_name_type > show_name_;
};

class Netlists: public ::xml_schema::type
{
  public:
  // NgspiceNetlist
  //
  typedef ::NgspiceNetlist NgspiceNetlist_type;
  typedef ::xsd::cxx::tree::traits< NgspiceNetlist_type, char > NgspiceNetlist_traits;

  const NgspiceNetlist_type&
  NgspiceNetlist () const;

  NgspiceNetlist_type&
  NgspiceNetlist ();

  void
  NgspiceNetlist (const NgspiceNetlist_type& x);

  void
  NgspiceNetlist (::std::unique_ptr< NgspiceNetlist_type > p);

  // Constructors.
  //
  Netlists (const NgspiceNetlist_type&);

  Netlists (::std::unique_ptr< NgspiceNetlist_type >);

  Netlists (const ::xercesc::DOMElement& e,
            ::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0);

  Netlists (const Netlists& x,
            ::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0);

  virtual Netlists*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  Netlists&
  operator= (const Netlists& x);

  virtual 
  ~Netlists ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  ::xsd::cxx::tree::one< NgspiceNetlist_type > NgspiceNetlist_;
};

class Symbols: public ::xml_schema::type
{
  public:
  // Symbol
  //
  typedef ::Symbol Symbol_type;
  typedef ::xsd::cxx::tree::traits< Symbol_type, char > Symbol_traits;

  const Symbol_type&
  Symbol () const;

  Symbol_type&
  Symbol ();

  void
  Symbol (const Symbol_type& x);

  void
  Symbol (::std::unique_ptr< Symbol_type > p);

  // Constructors.
  //
  Symbols (const Symbol_type&);

  Symbols (::std::unique_ptr< Symbol_type >);

  Symbols (const ::xercesc::DOMElement& e,
           ::xml_schema::flags f = 0,
           ::xml_schema::container* c = 0);

  Symbols (const Symbols& x,
           ::xml_schema::flags f = 0,
           ::xml_schema::container* c = 0);

  virtual Symbols*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  Symbols&
  operator= (const Symbols& x);

  virtual 
  ~Symbols ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  ::xsd::cxx::tree::one< Symbol_type > Symbol_;
};

class Parameters: public ::xml_schema::type
{
  public:
  // Parameter
  //
  typedef ::Parameter Parameter_type;
  typedef ::xsd::cxx::tree::sequence< Parameter_type > Parameter_sequence;
  typedef Parameter_sequence::iterator Parameter_iterator;
  typedef Parameter_sequence::const_iterator Parameter_const_iterator;
  typedef ::xsd::cxx::tree::traits< Parameter_type, char > Parameter_traits;

  const Parameter_sequence&
  Parameter () const;

  Parameter_sequence&
  Parameter ();

  void
  Parameter (const Parameter_sequence& s);

  // Constructors.
  //
  Parameters ();

  Parameters (const ::xercesc::DOMElement& e,
              ::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0);

  Parameters (const Parameters& x,
              ::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0);

  virtual Parameters*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  Parameters&
  operator= (const Parameters& x);

  virtual 
  ~Parameters ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  Parameter_sequence Parameter_;
};

class NgspiceNetlist: public ::xml_schema::type
{
  public:
  // value
  //
  typedef ::xml_schema::string value_type;
  typedef ::xsd::cxx::tree::traits< value_type, char > value_traits;

  const value_type&
  value () const;

  value_type&
  value ();

  void
  value (const value_type& x);

  void
  value (::std::unique_ptr< value_type > p);

  // Constructors.
  //
  NgspiceNetlist (const value_type&);

  NgspiceNetlist (const ::xercesc::DOMElement& e,
                  ::xml_schema::flags f = 0,
                  ::xml_schema::container* c = 0);

  NgspiceNetlist (const NgspiceNetlist& x,
                  ::xml_schema::flags f = 0,
                  ::xml_schema::container* c = 0);

  virtual NgspiceNetlist*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  NgspiceNetlist&
  operator= (const NgspiceNetlist& x);

  virtual 
  ~NgspiceNetlist ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  ::xsd::cxx::tree::one< value_type > value_;
};

class Symbol: public ::xml_schema::type
{
  public:
  // File
  //
  typedef ::xml_schema::string File_type;
  typedef ::xsd::cxx::tree::traits< File_type, char > File_traits;

  const File_type&
  File () const;

  File_type&
  File ();

  void
  File (const File_type& x);

  void
  File (::std::unique_ptr< File_type > p);

  // id
  //
  typedef ::xml_schema::string id_type;
  typedef ::xsd::cxx::tree::traits< id_type, char > id_traits;

  const id_type&
  id () const;

  id_type&
  id ();

  void
  id (const id_type& x);

  void
  id (::std::unique_ptr< id_type > p);

  // type
  //
  typedef ::xml_schema::string type_type;
  typedef ::xsd::cxx::tree::traits< type_type, char > type_traits;

  const type_type&
  type () const;

  type_type&
  type ();

  void
  type (const type_type& x);

  void
  type (::std::unique_ptr< type_type > p);

  // Constructors.
  //
  Symbol (const File_type&,
          const id_type&,
          const type_type&);

  Symbol (const ::xercesc::DOMElement& e,
          ::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0);

  Symbol (const Symbol& x,
          ::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0);

  virtual Symbol*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  Symbol&
  operator= (const Symbol& x);

  virtual 
  ~Symbol ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  ::xsd::cxx::tree::one< File_type > File_;
  ::xsd::cxx::tree::one< id_type > id_;
  ::xsd::cxx::tree::one< type_type > type_;
};

class Parameter: public ::xml_schema::type
{
  public:
  // Description
  //
  typedef ::xml_schema::string Description_type;
  typedef ::xsd::cxx::tree::traits< Description_type, char > Description_traits;

  const Description_type&
  Description () const;

  Description_type&
  Description ();

  void
  Description (const Description_type& x);

  void
  Description (::std::unique_ptr< Description_type > p);

  // name
  //
  typedef ::xml_schema::string name_type;
  typedef ::xsd::cxx::tree::traits< name_type, char > name_traits;

  const name_type&
  name () const;

  name_type&
  name ();

  void
  name (const name_type& x);

  void
  name (::std::unique_ptr< name_type > p);

  // unit
  //
  typedef ::xml_schema::string unit_type;
  typedef ::xsd::cxx::tree::traits< unit_type, char > unit_traits;

  const unit_type&
  unit () const;

  unit_type&
  unit ();

  void
  unit (const unit_type& x);

  void
  unit (::std::unique_ptr< unit_type > p);

  // default_value
  //
  typedef ::xml_schema::decimal default_value_type;
  typedef ::xsd::cxx::tree::traits< default_value_type, char, ::xsd::cxx::tree::schema_type::decimal > default_value_traits;

  const default_value_type&
  default_value () const;

  default_value_type&
  default_value ();

  void
  default_value (const default_value_type& x);

  // show
  //
  typedef ::xml_schema::boolean show_type;
  typedef ::xsd::cxx::tree::traits< show_type, char > show_traits;

  const show_type&
  show () const;

  show_type&
  show ();

  void
  show (const show_type& x);

  // Constructors.
  //
  Parameter (const Description_type&,
             const name_type&,
             const unit_type&,
             const default_value_type&,
             const show_type&);

  Parameter (const ::xercesc::DOMElement& e,
             ::xml_schema::flags f = 0,
             ::xml_schema::container* c = 0);

  Parameter (const Parameter& x,
             ::xml_schema::flags f = 0,
             ::xml_schema::container* c = 0);

  virtual Parameter*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  Parameter&
  operator= (const Parameter& x);

  virtual 
  ~Parameter ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  ::xsd::cxx::tree::one< Description_type > Description_;
  ::xsd::cxx::tree::one< name_type > name_;
  ::xsd::cxx::tree::one< unit_type > unit_;
  ::xsd::cxx::tree::one< default_value_type > default_value_;
  ::xsd::cxx::tree::one< show_type > show_;
};

#include <iosfwd>

#include <xercesc/sax/InputSource.hpp>
#include <xercesc/dom/DOMDocument.hpp>
#include <xercesc/dom/DOMErrorHandler.hpp>

// Parse a URI or a local file.
//

::std::unique_ptr< ::Library >
Library_ (const ::std::string& uri,
          ::xml_schema::flags f = 0,
          const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::unique_ptr< ::Library >
Library_ (const ::std::string& uri,
          ::xml_schema::error_handler& eh,
          ::xml_schema::flags f = 0,
          const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::unique_ptr< ::Library >
Library_ (const ::std::string& uri,
          ::xercesc::DOMErrorHandler& eh,
          ::xml_schema::flags f = 0,
          const ::xml_schema::properties& p = ::xml_schema::properties ());

// Parse std::istream.
//

::std::unique_ptr< ::Library >
Library_ (::std::istream& is,
          ::xml_schema::flags f = 0,
          const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::unique_ptr< ::Library >
Library_ (::std::istream& is,
          ::xml_schema::error_handler& eh,
          ::xml_schema::flags f = 0,
          const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::unique_ptr< ::Library >
Library_ (::std::istream& is,
          ::xercesc::DOMErrorHandler& eh,
          ::xml_schema::flags f = 0,
          const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::unique_ptr< ::Library >
Library_ (::std::istream& is,
          const ::std::string& id,
          ::xml_schema::flags f = 0,
          const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::unique_ptr< ::Library >
Library_ (::std::istream& is,
          const ::std::string& id,
          ::xml_schema::error_handler& eh,
          ::xml_schema::flags f = 0,
          const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::unique_ptr< ::Library >
Library_ (::std::istream& is,
          const ::std::string& id,
          ::xercesc::DOMErrorHandler& eh,
          ::xml_schema::flags f = 0,
          const ::xml_schema::properties& p = ::xml_schema::properties ());

// Parse xercesc::InputSource.
//

::std::unique_ptr< ::Library >
Library_ (::xercesc::InputSource& is,
          ::xml_schema::flags f = 0,
          const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::unique_ptr< ::Library >
Library_ (::xercesc::InputSource& is,
          ::xml_schema::error_handler& eh,
          ::xml_schema::flags f = 0,
          const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::unique_ptr< ::Library >
Library_ (::xercesc::InputSource& is,
          ::xercesc::DOMErrorHandler& eh,
          ::xml_schema::flags f = 0,
          const ::xml_schema::properties& p = ::xml_schema::properties ());

// Parse xercesc::DOMDocument.
//

::std::unique_ptr< ::Library >
Library_ (const ::xercesc::DOMDocument& d,
          ::xml_schema::flags f = 0,
          const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::unique_ptr< ::Library >
Library_ (::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d,
          ::xml_schema::flags f = 0,
          const ::xml_schema::properties& p = ::xml_schema::properties ());

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

#endif // BASICIHP_HXX
